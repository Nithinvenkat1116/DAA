#include <stdio.h>

void add(int n, int A[][n], int B[][n], int C[][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = A[i][j] + B[i][j];
        }
    }
}

void subtract(int n, int A[][n], int B[][n], int C[][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = A[i][j] - B[i][j];
        }
    }
}

void strassen(int n, int A[][n], int B[][n], int C[][n]) {
    if (n == 1) {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }

    int newSize = n / 2;

    // Create submatrices
    int A11[newSize][newSize], A12[newSize][newSize], A21[newSize][newSize], A22[newSize][newSize];
    int B11[newSize][newSize], B12[newSize][newSize], B21[newSize][newSize], B22[newSize][newSize];
    int C11[newSize][newSize], C12[newSize][newSize], C21[newSize][newSize], C22[newSize][newSize];
    int P1[newSize][newSize], P2[newSize][newSize], P3[newSize][newSize], P4[newSize][newSize];
    int P5[newSize][newSize], P6[newSize][newSize], P7[newSize][newSize];
    
    // Divide matrices into submatrices
    for (int i = 0; i < newSize; i++) {
        for (int j = 0; j < newSize; j++) {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + newSize];
            A21[i][j] = A[i + newSize][j];
            A22[i][j] = A[i + newSize][j + newSize];

            B11[i][j] = B[i][j];
            B12[i][j] = B[i][j + newSize];
            B21[i][j] = B[i + newSize][j];
            B22[i][j] = B[i + newSize][j + newSize];
        }
    }

    // Calculate products using Strassen's algorithm
    add(newSize, A11, A22, P1);
    add(newSize, B11, B22, P2);
    add(newSize, A21, A22, P3);
    subtract(newSize, B12, B22, P4);
    add(newSize, A11, A12, P5);
    subtract(newSize, B21, B11, P6);
    subtract(newSize, A12, A22, P7);

    // Recursive calls
    strassen(newSize, P1, B11, C11);
    strassen(newSize, A11, P2, C12);
    strassen(newSize, A22, P3, C21);
    strassen(newSize, P4, B21, C22);
    strassen(newSize, P5, P6, C12);
    strassen(newSize, P5, P7, C21);
    strassen(newSize, P4, P5, C11);
    strassen(newSize, P6, P7, C22);

    // Combine results into C matrix
    for (int i = 0; i < newSize; i++) {
        for (int j = 0; j < newSize; j++) {
            C[i][j] = C11[i][j];
            C[i][j + newSize] = C12[i][j];
            C[i + newSize][j] = C21[i][j];
            C[i + newSize][j + newSize] = C22[i][j];
        }
    }
}

void printMatrix(int n, int matrix[][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d\t", matrix[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int n;

    // Input the size of the matrices
    printf("Enter the size of matrices (power of 2): ");
    scanf("%d", &n);

    if (n <= 0 || (n & (n - 1)) != 0) {
        printf("Invalid input. Size should be a positive power of 2.\n");
        return 1; // Exit with an error code
    }

    int A[n][n], B[n][n], C[n][n];

    // Input matrices A and B
    printf("Enter matrix A:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &A[i][j]);
        }
    }

    printf("Enter matrix B:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &B[i][j]);
        }
    }

    // Call Strassen's algorithm
    strassen(n, A, B, C);

    // Print the result matrix
    printf("Result matrix C:\n");
    printMatrix(n, C);

    return 0;
}

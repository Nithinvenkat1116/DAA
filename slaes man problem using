#include <stdio.h>
#include <limits.h>

#define V 4 // Number of cities

// Function to find the minimum cost using dynamic programming
int tsp(int graph[V][V], int mask, int pos, int dp[V][1 << V]) {
    // If all cities are visited, return the cost of returning to the starting city
    if (mask == (1 << V) - 1) {
        return graph[pos][0];
    }

    // If the subproblem has already been solved, return the stored result
    if (dp[pos][mask] != -1) {
        return dp[pos][mask];
    }

    int minCost = INT_MAX;

    // Try visiting unvisited cities and find the minimum cost
    for (int i = 0; i < V; i++) {
        if (!(mask & (1 << i))) {
            int newCost = graph[pos][i] + tsp(graph, mask | (1 << i), i, dp);
            minCost = (newCost < minCost) ? newCost : minCost;
        }
    }

    // Memoize the result for the subproblem
    dp[pos][mask] = minCost;

    return minCost;
}

// Driver program to test above functions
int main() {
    int graph[V][V] = {
        {0, 10, 15, 20},
        {10, 0, 35, 25},
        {15, 35, 0, 30},
        {20, 25, 30, 0}
    };

    // dp table to memoize subproblem results
    int dp[V][1 << V];
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < (1 << V); j++) {
            dp[i][j] = -1;
        }
    }

    // Start from the first city (0)
    int startCity = 0;

    // Find the minimum cost
    int minCost = tsp(graph, 1 << startCity, startCity, dp);

    printf("The minimum cost of the TSP is: %d\n", minCost);

    return 0;
}

#include <stdio.h>
#include <stdbool.h>

#define N 8  // Change N to the desired board size

// Function to print the chessboard
void printBoard(int board[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%c ", board[i][j] ? 'Q' : '.');
        }
        printf("\n");
    }
}

// Function to check if it's safe to place a queen at board[row][col]
bool isSafe(int board[N][N], int row, int col) {
    // Check for queens in the same column
    for (int i = 0; i < row; i++) {
        if (board[i][col]) {
            return false;
        }
    }

    // Check for queens in the left diagonal
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j]) {
            return false;
        }
    }

    // Check for queens in the right diagonal
    for (int i = row, j = col; i >= 0 && j < N; i--, j++) {
        if (board[i][j]) {
            return false;
        }
    }

    return true;
}

// Recursive function to solve the N-Queens problem using backtracking
bool solveNQueens(int board[N][N], int row) {
    if (row == N) {
        // All queens are placed successfully
        printBoard(board);
        return true;
    }

    bool res = false;
    for (int i = 0; i < N; i++) {
        if (isSafe(board, row, i)) {
            board[row][i] = 1;  // Place the queen

            // Recur to place rest of the queens
            res = solveNQueens(board, row + 1) || res;

            board[row][i] = 0;  // If placing queen in this position doesn't lead to a solution, backtrack
        }
    }

    return res;
}

int main() {
    int board[N][N] = {0};

    if (!solveNQueens(board, 0)) {
        printf("Solution does not exist.\n");
    }

    return 0;
}

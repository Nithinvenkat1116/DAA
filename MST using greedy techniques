#include <stdio.h>
#include <stdlib.h>

// Structure to represent an edge in the graph
struct Edge {
    int src, dest, weight;
};

// Structure to represent a subset for union-find (disjoint set)
struct Subset {
    int parent, rank;
};

// Function to compare two edges based on their weights
int compareEdges(const void *a, const void *b) {
    return ((struct Edge*)a)->weight - ((struct Edge*)b)->weight;
}

// Function to find the set to which a vertex belongs (uses path compression)
int find(struct Subset subsets[], int i) {
    if (subsets[i].parent != i) {
        subsets[i].parent = find(subsets, subsets[i].parent);
    }
    return subsets[i].parent;
}

// Function to perform union of two sets (uses union by rank)
void unionSets(struct Subset subsets[], int x, int y) {
    int xRoot = find(subsets, x);
    int yRoot = find(subsets, y);

    if (subsets[xRoot].rank < subsets[yRoot].rank) {
        subsets[xRoot].parent = yRoot;
    } else if (subsets[xRoot].rank > subsets[yRoot].rank) {
        subsets[yRoot].parent = xRoot;
    } else {
        subsets[yRoot].parent = xRoot;
        subsets[xRoot].rank++;
    }
}

// Function to find the Minimum Spanning Tree using Kruskal's algorithm
void kruskalMST(struct Edge edges[], int V, int E) {
    // Sort the edges in non-decreasing order of their weights
    qsort(edges, E, sizeof(struct Edge), compareEdges);

    // Allocate memory for subsets
    struct Subset *subsets = (struct Subset*)malloc(V * sizeof(struct Subset));

    // Create V subsets with single elements
    for (int i = 0; i < V; i++) {
        subsets[i].parent = i;
        subsets[i].rank = 0;
    }

    // Initialize variables
    int mstWeight = 0;
    int mstEdges = 0;

    // Iterate through all sorted edges
    for (int i = 0; mstEdges < V - 1; i++) {
        int x = find(subsets, edges[i].src);
        int y = find(subsets, edges[i].dest);

        // Check if including this edge forms a cycle
        if (x != y) {
            // Include the edge in the MST
            printf("Edge %d: %d -- %d, Weight: %d\n", mstEdges + 1, edges[i].src, edges[i].dest, edges[i].weight);
            mstWeight += edges[i].weight;
            mstEdges++;
            unionSets(subsets, x, y);
        }
    }

    // Print the total weight of the MST
    printf("Total Weight of MST: %d\n", mstWeight);

    // Free allocated memory
    free(subsets);
}

int main() {
    // Example usage
    int V = 4; // Number of vertices
    int E = 5; // Number of edges

    struct Edge edges[] = {
        {0, 1, 10},
        {0, 2, 6},
        {0, 3, 5},
        {1, 3, 15},
        {2, 3, 4}
    };

    // Find the Minimum Spanning Tree using Kruskal's algorithm
    kruskalMST(edges, V, E);

    return 0;
}

#include <stdio.h>
#include <stdbool.h>

#define V 4  // Number of vertices in the graph

// Function to check if it's safe to color a vertex with a given color
bool isSafe(int v, int graph[V][V], int color[], int c) {
    for (int i = 0; i < V; i++) {
        if (graph[v][i] && color[i] == c) {
            return false;
        }
    }
    return true;
}

// Recursive function to solve the graph coloring problem using backtracking
bool graphColoringUtil(int graph[V][V], int m, int color[], int v) {
    if (v == V) {
        return true;  // All vertices are colored
    }

    for (int c = 1; c <= m; c++) {
        if (isSafe(v, graph, color, c)) {
            color[v] = c;

            // Recur to color the remaining vertices
            if (graphColoringUtil(graph, m, color, v + 1)) {
                return true;
            }

            // If coloring with color c doesn't lead to a solution, backtrack
            color[v] = 0;
        }
    }

    return false;  // No color can be assigned to this vertex
}

// Function to solve the graph coloring problem
bool graphColoring(int graph[V][V], int m) {
    int color[V];

    for (int i = 0; i < V; i++) {
        color[i] = 0;  // Initialize colors to 0
    }

    if (!graphColoringUtil(graph, m, color, 0)) {
        printf("Solution does not exist.\n");
        return false;
    }

    printf("Solution exists. The coloring is:\n");
    for (int i = 0; i < V; i++) {
        printf("Vertex %d: Color %d\n", i + 1, color[i]);
    }

    return true;
}

int main() {
    int graph[V][V] = {
        {0, 1, 1, 1},
        {1, 0, 1, 0},
        {1, 1, 0, 1},
        {1, 0, 1, 0}
    };

    int m = 3;  // Number of colors

    graphColoring(graph, m);

    return 0;
}

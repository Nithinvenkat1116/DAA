#include <stdio.h>

// Structure to represent items
struct Item {
    int weight;
    int value;
};

// Function to compare items based on their value-to-weight ratio
int compareItems(const void *a, const void *b) {
    double ratioA = ((double) ((struct Item*)a)->value) / ((struct Item*)a)->weight;
    double ratioB = ((double) ((struct Item*)b)->value) / ((struct Item*)b)->weight;
    return (ratioB > ratioA) - (ratioB < ratioA);
}

// Function to solve the 0/1 Knapsack Problem using a greedy approach
void knapsackGreedy(struct Item items[], int n, int capacity) {
    // Sort items based on their value-to-weight ratio in non-increasing order
    qsort(items, n, sizeof(struct Item), compareItems);

    // Initialize variables
    int currentWeight = 0;
    double totalValue = 0.0;

    // Iterate through the sorted items
    for (int i = 0; i < n; i++) {
        // If adding the entire item doesn't exceed the capacity, add it
        if (currentWeight + items[i].weight <= capacity) {
            currentWeight += items[i].weight;
            totalValue += items[i].value;
        } else {
            // Add a fraction of the item to fill the remaining capacity
            double remainingCapacity = capacity - currentWeight;
            totalValue += (remainingCapacity / items[i].weight) * items[i].value;
            break;
        }
    }

    // Print the result
    printf("Maximum value that can be obtained: %.2lf\n", totalValue);
}

int main() {
    // Example usage
    struct Item items[] = {{10, 60}, {20, 100}, {30, 120}};
    int n = sizeof(items) / sizeof(items[0]);
    int capacity = 50;

    printf("Items:\n");
    for (int i = 0; i < n; i++) {
        printf("Item %d - Weight: %d, Value: %d\n", i + 1, items[i].weight, items[i].value);
    }

    knapsackGreedy(items, n, capacity);

    return 0;
}
